package com.justsy.eleschoolbag.mutildownload;

import java.io.File;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.HashMap;
import java.util.Map;

import org.apache.http.HttpStatus;

import android.content.Context;

public class MutilDownloadClient {

	private static final int DEFAULT_MUTILTHREADNUM = 1;
	private static final String DEFAULT_FILESAVEDIR = "/sdcard/Download";
	
	private boolean isFinish = false;
	private boolean isStop = false;
	
	private Context context;
	private String urlPath;
	private MutilDownloadHandler mutilDownloadHandler;
	private int mutilThreadNum = DEFAULT_MUTILTHREADNUM;
	private String fileSaveDir = DEFAULT_FILESAVEDIR;
	private String fileSaveName;
	private long fileSize = 0L;
	
	private MutilDownloadDBService progressService;
	
	private Map<Integer, Long> threadsProgress = new HashMap<Integer, Long>();
	
	private long preThreadBlock;
	
	private MutilDownloadThread[] downloadThreads;
	
	public MutilDownloadClient(Context context, String urlPath,
			MutilDownloadHandler mutilDownloadHandler) {

		this.context = context;
		this.urlPath = urlPath;
		this.mutilDownloadHandler = mutilDownloadHandler;
		
	}

	public MutilDownloadClient(Context context, String urlPath,
			MutilDownloadHandler mutilDownloadHandler, int mutilThreadNum,
			String fileSaveDir, String fileSaveName, long fileSize) {
		
		this.context = context;
		this.urlPath = urlPath;
		this.mutilDownloadHandler = mutilDownloadHandler;
		this.mutilThreadNum = mutilThreadNum;
		this.fileSaveDir = fileSaveDir;
		this.fileSaveName = fileSaveName;
		this.fileSize = fileSize;
		
	}

	public void start() {
		
		if(fileSaveName == null && fileSize == 0L){
			
			/** init fileSaveName */
			fileSaveName = urlPath.substring(urlPath.lastIndexOf('/') + 1);
			if(fileSaveName == null || "".equals(fileSaveName)){
				return;
			}
			
			/** init fileSize */
//			HttpURLConnection conn = null;
//			try {
//				URL url = new URL(urlPath);
//				conn = (HttpURLConnection) url.openConnection();
//				conn.setRequestMethod("GET");
//				int responseCode = conn.getResponseCode();
//				if(responseCode == HttpStatus.SC_OK){
//					fileSize = conn.getContentLength();
//					if(fileSize == -1L){
//						return;
//					}
//				}
//			}catch(Exception e) {
//				e.printStackTrace();
//				return;
//			}finally{
//				if(conn != null){
//					conn.disconnect();
//				}
//			}
			
		}
		
		progressService = new MutilDownloadDBService(context);
		
		threadsProgress = progressService.getMutilThreadProgress(urlPath);
		
		preThreadBlock = (fileSize % mutilThreadNum)==0 ? fileSize / mutilThreadNum : fileSize / mutilThreadNum + 1;
		
		int threadsProgressSize = threadsProgress.size();
		if(threadsProgressSize != 0 && threadsProgressSize != mutilThreadNum){
			return;
		}
		
		if(threadsProgressSize == 0){
			for (int i = 0; i < mutilThreadNum; i++) {
				threadsProgress.put(i+1, 0L);//初始化每条线程已经下载的数据长度为0
			}
		}
		
		/** mutil thread */
		if(mutilThreadNum > DEFAULT_MUTILTHREADNUM){
			
			File dirFile = new File(fileSaveDir);
			if(!dirFile.exists()){
				dirFile.mkdirs();
			}
			
			File filePath = new File(dirFile.getAbsolutePath()+File.separator+fileSaveName);
			
			if(!filePath.exists()){
				RandomAccessFile raf = null;
				try {
					filePath.createNewFile();
					raf = new RandomAccessFile(filePath, "rw");
					raf.setLength(fileSize);
				} catch (IOException e) {
					e.printStackTrace();
				}finally{
					if(raf != null){
						try {
							raf.close();
						} catch (IOException e) {
							e.printStackTrace();
						}
					}
				}
			}
			
			downloadThreads = new MutilDownloadThread[mutilThreadNum];
			
			for (int i = 0; i < downloadThreads.length; i++) {//开启线程进行下载
				long downLength = threadsProgress.get(i+1);
				if(downLength < preThreadBlock){//判断线程是否已经完成下载,否则继续下载	
					downloadThreads[i] = new MutilDownloadThread(this, urlPath, filePath, preThreadBlock, downLength, i+1);
					downloadThreads[i].start();
				}else{
					downloadThreads[i] = null;
				}
			}
			
		}
		
	}

	public void stop() {
	}

	public boolean isFinish() {
		return isFinish;
	}

	public void setFinish(boolean isFinish) {
		this.isFinish = isFinish;
	}

	public boolean isStop() {
		return isStop;
	}

	public void setStop(boolean isStop) {
		this.isStop = isStop;
	}

	public synchronized void update(int threadId, long pos) {
		threadsProgress.put(threadId, pos);
		progressService.update(urlPath, threadsProgress);
	}
}
